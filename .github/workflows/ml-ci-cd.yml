# # .github/workflows/ml-ci-cd.yml
# name: ML CI/CD Workflow

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# env:
#   PORT: 8080

# jobs:
#   train_and_deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.9'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt  # Include necessary Python packages

#       - name: Data Generation
#         run: python generate_data.py

#       - name: Data Preprocessing
#         run: python preprocessing.py

#       - name: Model Training
#         run: python train.py

#       - name: Data Test Generation
#         run: python generate_test_data.py

#       - name: Model Testing
#         run: python test.py

#       - name: Model Deployment
#         if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#         run: |
#           pip install python-dotenv
#           python -c "from dotenv import dotenv_values; import os; os.environ.update(dotenv_values('.env'))"            
#           echo $PORT
#           python -m flask run --port $PORT


name: CI/CD to Azure VM

on:
  push:
    branches:
      - main

env:
  CONTAINER_NAME: flask-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log into Azure VM
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set up Docker
        uses: azure/docker-login@v1
        with:
          login-server: khanifregistry.azurecr.io  # Replace with your Docker registry URL
          username: ${{secrets.AZURE_CR_USERNAME}}
          password: ${{secrets.AZURE_CR_PASSWORD}}

      - name: Build and push Docker image
        run: |
          docker build -t flask-app:latest .
          docker tag flask-app:latest khanifregistry.azurecr.io/flask-app:latest
          docker push khanifregistry.azurecr.io/flask-app:latest

      - name: SSH into Azure VM and run Docker container
        uses: appleboy/ssh-action@master
        with:
          host: "4.230.17.53"
          username: ${{secrets.AZURE_SSH_USERNAME}}
          key: ${{secrets.AZURE_SSH_PRIVATE_KEY}}  # Use the SSH_PRIVATE_KEY secret for authentication
          passphrase: ''  # Add passphrase if your SSH key is encrypted
          script: |
            docker stop ${{env.CONTAINER_NAME}} || true
            docker rm ${{env.CONTAINER_NAME}} || true
            docker pull khanifregistry.azurecr.io/flask-app:latest
            docker run -d -p 80:80 --name ${{env.CONTAINER_NAME}} khanifregistry.azurecr.io/flask-app:latest